<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        i/8qSmX/BhY1/wYTKv8aNEb/P2eF/0xzj/8+T13/SVlk/3Keuf9yn7z/SVto/y8+R/8pR1n/HjtM/xEg
        Lv8BAhL/AAAW/xwyR/8qS2b/GTJH/xInOP8cOE7/KU9r/wEDBP////8A////AAIDBP8oSFv/MFZs/zRe
        ef80XHz/MFRs/wURJ/8KG0f/J0R3/yU7X/83SWr/Sl96/1Zzmf9afJ7/X4Sn/1yApf9Ze5//VnOY/0tf
        ev8tNz//GiQ4/xMhTv8AACb/AQEQ/x85S/8tVHH/HDVI/xw3S/8ZLz//AQIC/////wD///8AAwUG/058
        nf9Ab4r/N193/0Rxkv8pR2b/J0J1/x0uW/83Snz/VHOs/2ya3f9yper/bp/e/16Ds/9TcZn/VHGa/16D
        s/9uoN7/c6bq/22a1/9Saov/LzdH/xIUMP8UIk3/Fig8/yhLZf8lRlz/LlNu/zBWc/8BAgP/////AP//
        /wADBQf/UYGk/0V0lP86Zn3/LlNp/yQ3Wv8+UoT/Vnez/26e4v9ypun/aJfU/1p8q/9MZIf/UW+i/2qa
        4v91qOv/Wnup/0tkh/9Ze6n/aZjT/3Sn6f9wn97/VnGW/zdBUP8cIi3/JUBV/y5Ub/8tVHH/MVh2/wED
        BP////8A////AAMFBv9EdZH/PmqB/zpUY/85RU//W32x/3Sl6P9ypun/Z5TO/1Z2ov9TcJn/apbS/2mX
        2f9KZ5r/SGCG/01ojf9Ye6n/b6Dg/2qW1P9Sbpj/VXWg/2eUzv9xpOf/cqPk/1p6pP84Q03/M0hY/zJW
        cv8yWXf/AQME/////wD///8ACg0O/zlQXv9GVmL/a5Or/01md/9kj8P/ZpLJ/1Nxm/9PbqH/Zo/I/1Jx
        nP9TdJ//XYKz/01pkv9dg7n/Yom+/1JvmP9dg7T/U3Of/0dhj/9We7z/WHmp/1RynP9lkMf/ZI/E/05n
        ef9sla7/R1lm/zRIWP8ICgv/////AP///wA0O0FPNTk+x1Nqef94qcf/Tmd5/2CIuf9fhbf/TmqT/1F0
        sf9eidH/V3qq/0xojv9Wd6L/VHKc/2qV0P9qldH/UG2a/1NzoP9MaI7/S2mc/1yFzf9ghbz/UW2U/16E
        tv9hirv/UGl7/3yty/9Vb4H/Nj1DyDM5P1D///8A////ADQ7QQA0NzsAMzY4PjQ2ObQ5QEf+YYW3/3Om
        6/9tn+H/T3Cq/0Veh/9Sb5j/caHi/3Om6P9cgrP/SWCD/0Zcf/9PbqT/bJzh/3Gh4v9LaJT/RV6H/1+H
        u/9wo+T/dKfr/2KHuP86Qkr+NjxCtTU7QT81PEIAMzo/AP///wD///8ANDtBADQ3OwAzNTgAMzU4ADQ3
        Oiw1O0GdQ1Nm+GGGtv9unuT/aZrf/2SOxf9WdJ7/T2mP/1h4pf9tnd//ZJPb/1Bwo/9PaY//U3Kb/2CK
        wf9zpuj/c6Xq/2CDtP9DU2f5NTtBnzQ3Oi01Oj8ANTtBADU8QgAzOj8A////AP///wA0O0EANDc7ADM1
        OAAzNTgANDc7ADU7QAA0O0EaNTo/iD5HVO9beqP/c6Tm/3Km6P9mk8z/Vnah/1FwoP9Mapz/UnGe/2OQ
        yf9xpOf/c6Tm/1t6pP8+R1TwNDY5iTQ5PRs0O0EANDc7ADU6PwA1O0EANTxCADM6PwD///8A////ADQ7
        QQA0NzsAMzU4ADM1OAA0NzsANTtAADQ7QQA0OT0AMzU4DjQ2OXQ6QUnjVnGW/2GGuP9cgKr/Wnyj/1h5
        of9bgKv/YYe4/1d0mv87RVHkNDg8dTM1OA4zNTgANDk9ADQ7QQA0NzsANTo/ADU7QQA1PEIAMzo/AP//
        /wD///8ANDtBADQ3OwAzNTgAMzU4ADQ3OwA1O0AANDtBADQ5PQAzNTgAMzU4ADQ2OgY1Oj9eNTo/0VFn
        dv96rMv/eKrK/1Bndv81Oj/SNTtBXzQ7QQY0OD0AMzU4ADM1OAA0OT0ANDtBADQ3OwA1Oj8ANTtBADU8
        QgAzOj8A////AP///wA0O0EANDc7ADM1OAAzNTgANDc7ADU7QAA0O0EANDk9ADM1OAAzNTgANDY6ADQ6
        PwAzNzoBNDpASjY9RMQ2PkTFNTpASzM3OgE0O0EANDtBADQ4PQAzNTgAMzU4ADQ5PQA0O0EANDc7ADU6
        PwA1O0EANTxCADM6PwD///8A//gf///gB///gAH//gAAf/gAAB/gAAADgAAAAYAAAAGAAAABgAAAAYAA
        AAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAA
        AAHgAAAH+AAAH/4AAH//gAH//+AH///4H/8=
</value>
  </data>
</root>